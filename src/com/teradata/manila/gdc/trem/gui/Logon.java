package com.teradata.manila.gdc.trem.gui;

import com.teradata.manila.gdc.trem.core.Main;
import com.teradata.manila.gdc.trem.util.Utilities;
import com.teradata.manila.gdc.trem.security.Authenticator;
import de.javasoft.plaf.synthetica.SyntheticaPlainLookAndFeel;
import de.javasoft.plaf.synthetica.SyntheticaBlueIceLookAndFeel;
import java.awt.event.KeyEvent;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author jl186034
 */
public class Logon extends javax.swing.JDialog {

    /**
     * Creates new form Logon
     *
     * @param parent
     * @param modal
     */
    private String message = "";
    private boolean opMode = false;

    public Logon(java.awt.Frame parent, boolean modal, boolean mode) {
        super(parent, modal);
        initComponents();
        this.opMode = mode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textFieldUsername = new javax.swing.JTextField();
        logonButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TREM - [Logon]");
        setAlwaysOnTop(true);
        setIconImage(null);
        setResizable(false);

        textFieldUsername.setBorder(javax.swing.BorderFactory.createTitledBorder("Quicklook ID"));
        textFieldUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldUsernameKeyPressed(evt);
            }
        });

        logonButton.setText("Logon");
        logonButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        logonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logonButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        passwordField.setToolTipText("");
        passwordField.setBorder(javax.swing.BorderFactory.createTitledBorder("Password"));
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(textFieldUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(passwordField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logonButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void logonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logonButtonActionPerformed
        System.out.println(System.getenv("APPDATA"));
        preAuth();
    }//GEN-LAST:event_logonButtonActionPerformed

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            preAuth();
        }
    }//GEN-LAST:event_passwordFieldKeyPressed

    private void textFieldUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldUsernameKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            preAuth();
        }
    }//GEN-LAST:event_textFieldUsernameKeyPressed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton logonButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField textFieldUsername;
    // End of variables declaration//GEN-END:variables

    private void preAuth() {
        String userName = textFieldUsername.getText().trim();
        char[] password = passwordField.getPassword();

        if (userName.length() <= 0 || password.length <= 0) {
            JOptionPane.showMessageDialog(this, "Username or Password cannot be blank.", "Invalid Credentials", JOptionPane.WARNING_MESSAGE);
        } else if (this.opMode == true) {
            //god mode
            String userNameNT = new com.sun.security.auth.module.NTSystem().getName();

            if (userNameNT.equals(userName)) {
                authenticate(userName, password);
            } else {
                try {
                    java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();

                    JOptionPane.showMessageDialog(this, "Unauthorized Administrative user.\n"
                            + "You must be a member of " + localMachine.getHostName() + "\\Administrators group.",
                            "Invalid Credentials",
                            JOptionPane.ERROR_MESSAGE);
                    //Log it
                    String now = new java.text.SimpleDateFormat("[MM/dd/yyyy HH:mm:ss]").format(new java.util.Date());
                    message += now + " Unauthorized Administrative user " + textFieldUsername.getText().trim() + "\n";
                } catch (UnknownHostException ex) {
                    Logger.getLogger(Logon.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            //Normal mode
            authenticate(userName, password);
        }
    }

    private void authenticate(String username, char[] password) {
        String now = new java.text.SimpleDateFormat("[MM/dd/yyyy HH:mm:ss]").format(new java.util.Date());

        Authenticator auth = new Authenticator(username, String.valueOf(password).trim());
        if (auth.authenticate() == true) {
            message += now + " Logon Success for " + textFieldUsername.getText().trim() + "\n";
            showMainFrame(message, this.opMode);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(this, "Unable to authorize user.\n"
                    + "You may have entered an invalid Username or Password.\n"
                    + "Please make sure you are connected to the Teradata Network.",
                    "Invalid Credentials",
                    JOptionPane.ERROR_MESSAGE);
            message += now + " Invalid Credentials for " + textFieldUsername.getText().trim() + "\n";
            message += auth.getEx() + "\n";
            Arrays.fill(password, '0');
            passwordField.selectAll();
        }
    }

    private void showMainFrame(String message, boolean opMode) {
        //Before anything else, kill them all!!!
        Utilities.killRunningProcess();

        if (opMode == true) {
            try {
                javax.swing.UIManager.setLookAndFeel(new SyntheticaBlueIceLookAndFeel());
            } catch (UnsupportedLookAndFeelException | ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                javax.swing.UIManager.setLookAndFeel(new SyntheticaPlainLookAndFeel());
            } catch (UnsupportedLookAndFeelException | ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        /* Create and display the form */
        MainFrame.setDefaultLookAndFeelDecorated(true);
        java.awt.EventQueue.invokeLater(() -> {
            //Override constructor
            new MainFrame(message, opMode).setVisible(true);
        });
    }

    private static final Logger LOG = Logger.getLogger(Logon.class.getName());
}
