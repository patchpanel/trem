package com.teradata.manila.gdc.trem.gui;

import com.teradata.manila.gdc.trem.core.*;
import com.teradata.manila.gdc.trem.util.CustomOutputStream;
import com.teradata.manila.gdc.trem.util.ScriptLogger;
import com.teradata.manila.gdc.trem.util.Utilities;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import java.awt.image.BufferedImage;
import java.io.IOException;

/**
 *
 * @author jl186034
 */
class MainFrame extends javax.swing.JFrame {

    private static final int PARAMETER_COL = 0;
    private boolean opMode = false;
    private boolean periodClose;
    private javax.swing.JMenuItem closePeriodMenutItem;
    private javax.swing.JTextArea commandTextArea;
    private javax.swing.JCheckBox emailReportsCheckBox;
    private javax.swing.JCheckBox extractReportsCheckBox;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable parameterTable;
    private javax.swing.JButton processButton;

    /**
     *
     */
    private MainFrame() {
        super();
    }

    /**
     *
     * @param message
     * @param mode
     */
    public MainFrame(String message, boolean mode) {
        //Check if Admin or Normal run
        this.opMode = mode;
        //Run Generate code
        initComponents();
        //Set JFrame image
        BufferedImage image = null;
        try {
            image = ImageIO.read(getClass().getClassLoader().getResource("images/app_icon.png"));
        } catch (IOException e) {
        }
        super.setIconImage(image);

        processButton.setEnabled(false);
        //Check Reporting Period based on lock files
        periodClose = Utilities.checkPeriodClose();
        closePeriodMenutItem.setEnabled(!periodClose);
        extractReportsCheckBox.setEnabled(!periodClose);
        emailReportsCheckBox.setEnabled(!periodClose);
        //Redirect STDOUT
        showinTextArea(commandTextArea);
        //Record Logon transactions
        System.out.println(message);
        //Prep param table data
        PropertiesFile pf = new PropertiesFile();
        buildParameterTable(parameterTable, pf);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        javax.swing.JPanel configurationPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        parameterTable = new javax.swing.JTable() {
            private static final long serialVersionUID = 1L;

            public boolean isCellEditable(int row, int column) {
                if (opMode) {
                    return column != 0;
                } else {
                    if (row == 6 && column == 1) return true;
                    if (row == 7 && column == 1) return true;
                    if (row == 14 && column == 1) return true;
                    if (row == 21 && column == 1) return true;
                    if (row == 24 && column == 1) return true;
                    return row == 25 && column == 1;
                }
            }
        };
        extractReportsCheckBox = new javax.swing.JCheckBox();
        emailReportsCheckBox = new javax.swing.JCheckBox();
        javax.swing.JPanel processingPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        commandTextArea = new javax.swing.JTextArea();
        commandTextArea.setEditable(false);
        processButton = new javax.swing.JButton();
        javax.swing.JMenuBar menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem saveMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator2 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem archiveMenuItem = new javax.swing.JMenuItem();
        closePeriodMenutItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator1 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Time Report - [Extractor-Mailer]");
        setLocationByPlatform(true);
        setName("mainFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        parameterTable.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        parameterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Parameter", "Value"
            }
        ));
        parameterTable.setCellSelectionEnabled(true);
        parameterTable.setOpaque(false);
        parameterTable.getModel().addTableModelListener(
                e -> {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    TableModel model = (TableModel)e.getSource();
                    String columnName = model.getColumnName(column);
                    Object data = model.getValueAt(row, column);
                    //System.out.println((String)data);
                });
            parameterTable.getColumnModel().getColumn(0).setPreferredWidth(35);
            parameterTable.getColumnModel().getColumn(1).setPreferredWidth(120);
            //Hide the last column
            //parameterTable.getColumnModel().getColumn(2).setWidth(0);
            //parameterTable.getColumnModel().getColumn(2).setMinWidth(0);
            //parameterTable.getColumnModel().getColumn(2).setMaxWidth(0);
            //parameterTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            parameterTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
            jScrollPane1.setViewportView(parameterTable);

            extractReportsCheckBox.setText("Extract Reports");
        extractReportsCheckBox.addItemListener(evt -> extractReportsCheckBoxItemStateChanged(evt));

            emailReportsCheckBox.setText("Email Reports");
        emailReportsCheckBox.addItemListener(evt -> emailReportsCheckBoxItemStateChanged(evt));

            javax.swing.GroupLayout configurationPanelLayout = new javax.swing.GroupLayout(configurationPanel);
            configurationPanel.setLayout(configurationPanelLayout);
            configurationPanelLayout.setHorizontalGroup(
                configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addGroup(configurationPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(extractReportsCheckBox)
                    .addGap(40, 40, 40)
                    .addComponent(emailReportsCheckBox)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            configurationPanelLayout.setVerticalGroup(
                configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(configurationPanelLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(extractReportsCheckBox)
                        .addComponent(emailReportsCheckBox))
                    .addContainerGap())
            );

            jTabbedPane1.addTab("Configuration", configurationPanel);

            commandTextArea.setBackground(new java.awt.Color(0, 0, 0));
            commandTextArea.setColumns(20);
            commandTextArea.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
            commandTextArea.setForeground(new java.awt.Color(153, 255, 0));
            commandTextArea.setRows(5);
            jScrollPane2.setViewportView(commandTextArea);

            javax.swing.GroupLayout processingPanelLayout = new javax.swing.GroupLayout(processingPanel);
            processingPanel.setLayout(processingPanelLayout);
            processingPanelLayout.setHorizontalGroup(
                processingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
            );
            processingPanelLayout.setVerticalGroup(
                processingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
            );

            jTabbedPane1.addTab("Processing", processingPanel);

            processButton.setText("Process");
        processButton.addActionListener(evt -> processButtonActionPerformed(evt));

            fileMenu.setMnemonic('f');
            fileMenu.setText("File");

            saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
            saveMenuItem.setMnemonic('s');
            saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(evt -> saveMenuItemActionPerformed(evt));
            fileMenu.add(saveMenuItem);
            fileMenu.add(jSeparator2);

            archiveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
            archiveMenuItem.setText("Archive Files");
        archiveMenuItem.addActionListener(evt -> archiveMenuItemActionPerformed(evt));
            fileMenu.add(archiveMenuItem);

            closePeriodMenutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
            closePeriodMenutItem.setText("Close Reporting Period");
        closePeriodMenutItem.addActionListener(evt -> closePeriodMenutItemActionPerformed(evt));
            fileMenu.add(closePeriodMenutItem);
            fileMenu.add(jSeparator1);

            exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
            exitMenuItem.setMnemonic('x');
            exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(evt -> exitMenuItemActionPerformed(evt));
            fileMenu.add(exitMenuItem);

            menuBar.add(fileMenu);

            helpMenu.setMnemonic('h');
            helpMenu.setText("Help");

            aboutMenuItem.setMnemonic('a');
            aboutMenuItem.setText("About");
            helpMenu.add(aboutMenuItem);

            menuBar.add(helpMenu);

            setJMenuBar(menuBar);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processButton)
                    .addContainerGap())
                .addComponent(jTabbedPane1)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jTabbedPane1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(processButton)
                    .addContainerGap())
            );

            pack();
            setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        cleanUp();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        //Fire it up
        jTabbedPane1.setSelectedIndex(1);
        this.runScript();
    }//GEN-LAST:event_processButtonActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        this.saveParameterTable(parameterTable);
        //Set controls depending on status
        periodClose = Utilities.checkPeriodClose();
        closePeriodMenutItem.setEnabled(!periodClose);
        extractReportsCheckBox.setEnabled(!periodClose);
        emailReportsCheckBox.setEnabled(!periodClose);
        processButton.setEnabled(extractReportsCheckBox.isSelected() || emailReportsCheckBox.isSelected());
        JOptionPane.showMessageDialog(this, "Property saved", "Save", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cleanUp();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void extractReportsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_extractReportsCheckBoxItemStateChanged
        if (extractReportsCheckBox.isSelected() || emailReportsCheckBox.isSelected()) {
            processButton.setEnabled(true);
        } else {
            processButton.setEnabled(false);
        }
    }//GEN-LAST:event_extractReportsCheckBoxItemStateChanged

    private void emailReportsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_emailReportsCheckBoxItemStateChanged
        if (emailReportsCheckBox.isSelected() || extractReportsCheckBox.isSelected()) {
            processButton.setEnabled(true);
        } else {
            processButton.setEnabled(false);
        }
    }//GEN-LAST:event_emailReportsCheckBoxItemStateChanged

    private void archiveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archiveMenuItemActionPerformed
        String message = "Archiving will compress and move all data from the following directories:\n"
                + "[Input, Output, Log]\n"
                + "Are you sure you want to continue?";
        if (JOptionPane.showConfirmDialog(this, message, "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            archiveFiles();
        }
    }//GEN-LAST:event_archiveMenuItemActionPerformed

    private void closePeriodMenutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closePeriodMenutItemActionPerformed
        String message = "No further processing can be done once a Reporting period is closed.\n"
                + "Are you sure you want to continue?";
        if (JOptionPane.showConfirmDialog(this, message, "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            closeReportPeriod();
            //Set controls depending on status
            periodClose = Utilities.checkPeriodClose();
            closePeriodMenutItem.setEnabled(!periodClose);
            extractReportsCheckBox.setEnabled(!periodClose);
            extractReportsCheckBox.setSelected(!periodClose);
            emailReportsCheckBox.setEnabled(!periodClose);
            emailReportsCheckBox.setSelected(!periodClose);
            processButton.setEnabled(extractReportsCheckBox.isSelected() || emailReportsCheckBox.isSelected());
        }
    }//GEN-LAST:event_closePeriodMenutItemActionPerformed
    // End of variables declaration//GEN-END:variables

    private void buildParameterTable(javax.swing.JTable table, PropertiesFile pf) {
        javax.swing.table.TableModel model = table.getModel();

        model.setValueAt("Root directory", 0, 0);
        model.setValueAt("Input directory", 1, 0);
        model.setValueAt("Output directory", 2, 0);
        model.setValueAt("Temp directory", 3, 0);
        model.setValueAt("Log directory", 4, 0);
        model.setValueAt("Bin directory", 5, 0);
        //Excel Filenames
        model.setValueAt("Excel Badge report", 6, 0);
        model.setValueAt("Excel Resource list (xlsx)", 7, 0);
        //Text Filenames
        model.setValueAt("Resource list (txt)", 8, 0);
        model.setValueAt("Managers list (txt)", 9, 0);
        //Worksheetnames
        model.setValueAt("Summary worksheet name", 10, 0);
        model.setValueAt("Entry/Exit Pair worksheet name", 11, 0);
        model.setValueAt("Detailed worksheet name", 12, 0);
        //Manager tag and BatchID      
        model.setValueAt("Manager report Tag", 13, 0);
        model.setValueAt("Reporting Period (YYYYMM)", 14, 0);
        //Scriptnames to be executed        
        model.setValueAt("Extract Resources list scriptname", 15, 0);
        model.setValueAt("Extract Individual Report scriptname", 16, 0);
        model.setValueAt("Extract Manager Report scriptname", 17, 0);
        model.setValueAt("Email All scriptname", 18, 0);
        model.setValueAt("Email Individual only scriptname", 19, 0);
        model.setValueAt("Email Managers only scriptname", 20, 0);
        //Email properties
        model.setValueAt("Email from:", 21, 0);
        model.setValueAt("SMTP Server", 22, 0);
        model.setValueAt("Message", 23, 0);
        model.setValueAt("Email to:", 24, 0);
        //Extras
        model.setValueAt("Archive days:", 25, 0);
        model.setValueAt("Archive scriptname:", 26, 0);
        model.setValueAt("Archive directory:", 27, 0);

        model.setValueAt(pf.getRootDir(), 0, 1);
        model.setValueAt(pf.getInputDir(), 1, 1);
        model.setValueAt(pf.getOutputDir(), 2, 1);
        model.setValueAt(pf.getTempDir(), 3, 1);
        model.setValueAt(pf.getLogDir(), 4, 1);
        model.setValueAt(pf.getBinDir(), 5, 1);
        model.setValueAt(pf.getExcelBadgeReport(), 6, 1);
        model.setValueAt(pf.getExcelResourceList(), 7, 1);
        model.setValueAt(pf.getTxtResourcelist(), 8, 1);
        model.setValueAt(pf.getTxtManagerList(), 9, 1);
        model.setValueAt(pf.getSummarySheet(), 10, 1);
        model.setValueAt(pf.getDetailEntExPairSheet(), 11, 1);
        model.setValueAt(pf.getDetailRawSheet(), 12, 1);
        model.setValueAt(pf.getTagMngrRept(), 13, 1);
        model.setValueAt(pf.getLastBatchId(), 14, 1);
        model.setValueAt(pf.getExtractResourceListScript(), 15, 1);
        model.setValueAt(pf.getExtractIndividualScript(), 16, 1);
        model.setValueAt(pf.getExtractManagerScript(), 17, 1);
        model.setValueAt(pf.getEmailAllScript(), 18, 1);
        model.setValueAt(pf.getEmailIndividualScript(), 19, 1);
        model.setValueAt(pf.getEmailManagerScript(), 20, 1);
        model.setValueAt(pf.getEmailFrom(), 21, 1);
        model.setValueAt(pf.getSmtpServer(), 22, 1);
        model.setValueAt(pf.getEmailBody(), 23, 1);
        model.setValueAt(pf.getEmailTo(), 24, 1);
        model.setValueAt(pf.getArchiveDays(), 25, 1);
        model.setValueAt(pf.getArchiveScript(), 26, 1);
        model.setValueAt(pf.getArchiveDir(), 27, 1);

        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                //Run this if app is under normal mode. Else it is admin
                if (!opMode) {
                    setBackground(java.awt.Color.LIGHT_GRAY);
                    setForeground(java.awt.Color.BLACK);

                    String parameter = (String) table.getModel().getValueAt(row, PARAMETER_COL);
                    if ("Excel Badge report".equals(parameter)
                            || "Excel Badge report".equals(parameter)
                            || "Excel Resource list (xlsx)".equals(parameter)
                            || "Reporting Period (YYYYMM)".equals(parameter)
                            || "Email from:".equals(parameter)
                            || "Email to:".equals(parameter)
                            || "Archive days:".equals(parameter)) {
                        setBackground(java.awt.Color.WHITE);
                        setForeground(java.awt.Color.BLACK);
                    }
                }
                return this;
            }
        });

    }

    private void saveParameterTable(javax.swing.JTable table) {
        javax.swing.table.TableModel model = table.getModel();

        PropertiesFile pf = new PropertiesFile();

        pf.setRootDir(model.getValueAt(0, 1).toString());
        pf.setInputDir(model.getValueAt(1, 1).toString());
        pf.setOutputDir(model.getValueAt(2, 1).toString());
        pf.setTempDir(model.getValueAt(3, 1).toString());
        pf.setLogDir(model.getValueAt(4, 1).toString());
        pf.setBinDir(model.getValueAt(5, 1).toString());
        pf.setExcelBadgeReport(model.getValueAt(6, 1).toString());
        pf.setExcelResourceList(model.getValueAt(7, 1).toString());
        pf.setTxtResourcelist(model.getValueAt(8, 1).toString());
        pf.setTxtManagerList(model.getValueAt(9, 1).toString());
        pf.setSummarySheet(model.getValueAt(10, 1).toString());
        pf.setDetailEntExPairSheet(model.getValueAt(11, 1).toString());
        pf.setDetailRawSheet(model.getValueAt(12, 1).toString());
        pf.setTagMngrRept(model.getValueAt(13, 1).toString());
        pf.setLastBatchId(model.getValueAt(14, 1).toString());
        pf.setExtractResourceListScript(model.getValueAt(15, 1).toString());
        pf.setExtractIndividualScript(model.getValueAt(16, 1).toString());
        pf.setExtractManagerScript(model.getValueAt(17, 1).toString());
        pf.setEmailAllScript(model.getValueAt(18, 1).toString());
        pf.setEmailIndividualScript(model.getValueAt(19, 1).toString());
        pf.setEmailManagerScript(model.getValueAt(20, 1).toString());
        pf.setEmailFrom(model.getValueAt(21, 1).toString());
        pf.setSmtpServer(model.getValueAt(22, 1).toString());
        pf.setEmailBody(model.getValueAt(23, 1).toString());
        pf.setEmailTo(model.getValueAt(24, 1).toString());
        pf.setArchiveDays(model.getValueAt(25, 1).toString());
        pf.setArchiveScript(model.getValueAt(26, 1).toString());
        pf.setArchiveDir(model.getValueAt(27, 1).toString());

        pf.WritePropertiesFile();
        buildParameterTable(this.parameterTable, pf);
    }

    private void saveLog() {
        PropertiesFile pf = new PropertiesFile();
        String now = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date());

        String filename = pf.getLogDir() + "\\trem." + now + ".log";
        System.out.println(filename);
        ScriptLogger logger = new ScriptLogger(filename, commandTextArea);
    }

    private void runScript() {
        //Stupid logic just to get around thread sync problem of displaying to JtextArea
        if (extractReportsCheckBox.isSelected() && !emailReportsCheckBox.isSelected()) {
            ExtractProcess ex = new ExtractProcess(processButton);
            Thread t = new Thread(ex, "Thread-Extract");
            t.start();
        }

        if (emailReportsCheckBox.isSelected() && !extractReportsCheckBox.isSelected()) {
            EmailProcess ep = new EmailProcess(processButton);
            Thread t = new Thread(ep, "Thread-Email");
            t.start();
        }

        if (emailReportsCheckBox.isSelected() && extractReportsCheckBox.isSelected()) {
            WholeProcess wp = new WholeProcess(processButton);
            Thread t = new Thread(wp, "Thread-WholeProcess");
            t.start();
        }
    }

    private void showinTextArea(final javax.swing.JTextArea textArea) {
        java.io.PrintStream originalOut = null;
        java.io.PrintStream originalErr = null;
        originalOut = System.out;
        originalErr = System.err;
        java.io.PrintStream printStream = new java.io.PrintStream(new CustomOutputStream(textArea));
        System.setOut(printStream);
        System.setErr(printStream);
    }

    private void cleanUp() {
        //archiveFiles();
        saveLog();
        Utilities.killRunningProcess();
    }

    private void archiveFiles() {
        jTabbedPane1.setSelectedIndex(1);

        System.out.println("Archiving files...please wait");
        ArchiveProcess ap = new ArchiveProcess();
        Thread t = new Thread(ap, "Thread-Archive");
        t.start();

    }

    private void closeReportPeriod() {
        Utilities.createPeriodLock();
        JOptionPane.showMessageDialog(this, "Reporting Period successfully closed.\n", "Report Period", JOptionPane.INFORMATION_MESSAGE);
    }

    // --Commented out by Inspection (5/2/2016 8:53 PM):private static final Logger LOG = Logger.getLogger(MainFrame.class.getName());
}
